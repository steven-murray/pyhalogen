import subprocess
import sys
import os

import json
from ConfigParser import SafeConfigParser as cfg
from os.path import join
from argparse import ArgumentParser

#===============================================================================
# Configuration
#===============================================================================
def main():
    parser = ArgumentParser()

    # parser.add_argument("nodes", type=int, help="the number of nodes requested")
#     parser.add_argument("-q", "--queue", default='routequeue', choices=['debugq', "routequeue"], help="the queue to put it on")
    parser.add_argument("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %(default)")
#     parser.add_argument("-W", '--walltime', default="01:00:00")

    # Arguments for the actual run
    parser.add_argument("filename", help="Gadget snapshot to be populated")
    parser.add_argument("outdir", help="Directory to which to write output files")
    parser.add_argument("configfile", help="Configuration file for the run")
    args = parser.parse_args()

    #===========================================================================
    # Run the configuration file
    #===========================================================================
    config = cfg()
    config.read(args.configfile)

    # outdir_base = config.get("IO", "outdir_base")
    outdir_anl = config.get("IO", "outdir_anl")

    tol = json.loads(config.get("RunOptions", 'tol'))
    ncells = json.loads(config.get("RunOptions", 'ncells'))
    min_halo_mass = json.loads(config.get("RunOptions", 'min_halo_mass'))
    max_mfrac = json.loads(config.get("RunOptions", 'max_mfrac'))
    alphas = json.loads(config.get("RunOptions", 'alpha'))
    nthreads = config.getint("RunOptions", "nthreads")

    density = config.getboolean("RunFlags", "density")
    exclusion = config.getboolean("RunFlags", "exclusion")
    analyse = config.getboolean("RunFlags", "analyse")
    plot = config.getboolean("RunFlags", "plot")
    post_analyse = config.getboolean("RunFlags", "post_analyse")
    alg = config.get("RunFlags", "alg")


    bins = config.getint("AnalyseOptions", "bins")
    nmax = config.getint("AnalyseOptions", 'nmax')
    rmax = config.getfloat("AnalyseOptions", "rmax")
    n_logint = config.getint("AnalyseOptions", "n_logint")
    makefile = config.get("AnalyseOptions", "makefile")
    numhalos = config.getint("AnalyseOptions", "numhalos")
    nr = config.getint("AnalyseOptions", "nr")

    mf_kwargs = config.get("MFOptions", "mf_kwargs")
    os.chdir("..")
    subprocess.call(["python", "setup.py", "install"])
    subprocess.call(["rm", "-rf", "build"])
    subprocess.call(["rm", "-rf", "dist"])

    # Set the number of threads.
    os.environ["OMP_NUM_THREADS"] = "%s" % nthreads
#    os.system("export OMP_NUM_THREADS=%s" % nthreads)
    #===============================================================================
    # SEND THE JOB
    #===============================================================================
    i = 0
    jobs = []
    fulloutdir = []
    for mfrac in max_mfrac:
        for m in min_halo_mass:
            for N in ncells:
                for alpha in alphas:
                    fname = os.path.split(args.filename)[1]

                    # Get a string rep of the original input which goes through
                    outdir_part = fname + "_" + "N" + str(N) + "_m" + str(m) + "_alpha" + str(alpha)\
                                   + "_mfrac" + str(mfrac)

                    fulloutdir.append(join(args.outdir, outdir_part))

                    if not os.path.exists(fulloutdir[i]):
                        os.system("mkdir " + fulloutdir[i])

                    # Make the config file for the runfast script
                    with open(join(fulloutdir[i], "config"), 'w') as f:
                        CFG = mkconfig(N, m, mfrac, density, exclusion,
                                       analyse, plot, bins, nmax,
                                       nr, rmax, n_logint, makefile, numhalos,
                                       alg, tol, alpha, mf_kwargs)

                        CFG.write(f)

                    # # ALSO COPY IN THE WHOLE SOURCE CODE

                    subprocess.call(["cp", "-r", "halogen", "%s" % join(fulloutdir[i])])

                    # Run the thing
                    os.chdir("/home/savila")
                    subprocess.call(["time", "halogen", "%s %s %s" % (args.filename, args.outdir, join(fulloutdir[i], "config"))])

    #===========================================================================
    # ANALYSIS PART
    #===========================================================================
    # Get the number for each created job
    if post_analyse:
        outdir = join(args.outdir, outdir_anl)

        if not os.path.exists(outdir):
            os.system("mkdir " + outdir)

        os.system("time analyse --nmax %s --nr %s --rmax %s --n_logint %s --numhalos %s" %
                  (jobs, " ".join(fulloutdir), args.filename, outdir, makefile,
                   nmax, nr, rmax, n_logint, numhalos))




def mkconfig(ncells, min_halo_mass, max_mfrac, density,
             exclusion, analyse, plot, bins, nmax,
             nr, rmax, n_logint, makefile, numhalos, alg, tol,
             alpha, mf_kwargs):
    config = cfg()

    config.add_section("RunOptions")
    config.set("RunOptions", "tol", str(tol))
    config.set("RunOptions", "ncells", str(ncells))
    config.set("RunOptions", "min_halo_mass", str(min_halo_mass))
    config.set("RunOptions", "max_mfrac", str(max_mfrac))
    config.set("RunOptions", "alpha", str(alpha))

    config.add_section("RunFlags")
    config.set("RunFlags", "density", str(density))
    config.set("RunFlags", "exclusion", str(exclusion))
    config.set("RunFlags", "analyse", str(analyse))
    config.set("RunFlags", "plot", str(plot))
    config.set("RunFlags", "alg", str(alg))

    config.add_section("AnalyseOptions")
    config.set("AnalyseOptions", "bins", str(bins))
    config.set("AnalyseOptions", "nmax", str(nmax))
    config.set("AnalyseOptions", "nr", str(nr))
    config.set("AnalyseOptions", "rmax", str(rmax))
    config.set("AnalyseOptions", "makefile", str(makefile))
    config.set("AnalyseOptions", "n_logint", str(n_logint))
    config.set("AnalyseOptions", "numhalos", str(numhalos))

    config.add_section("MFOptions")
    config.set("MFOptions", "mf_kwargs", str(mf_kwargs))

    return config
if __name__ == "__main__":
    sys.exit(main())

